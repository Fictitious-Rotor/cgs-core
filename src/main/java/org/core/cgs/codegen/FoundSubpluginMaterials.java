package org.core.cgs.codegen;

import com.google.common.collect.ImmutableSet;
import org.bukkit.event.Listener;
import org.core.cgs.generic.abstracts.CGSListener;
import org.core.cgs.generic.classes.MetadataBundle;
import org.core.cgs.generic.classes.SubPlugin;
import org.core.cgs.generic.interfaces.CommandBackend;
import org.core.cgs.generic.utilities.PlayerInterface;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class FoundSubpluginMaterials {
    private static final Set<SubPlugin> allSubPlugins = new HashSet<>();
    private static final Map<String, Set<CommandBackend>> subPluginsToCommandBackends = new HashMap<>();
    private static final Map<String, Set<? extends CGSListener>> subPluginsToListeners = new HashMap<>();
    private static final Map<String, MetadataBundle> subPluginsToMetadataHandlers = new HashMap<>();

    static {
        // Autogenerated content for: 'Infinitechests'
        // Command Backends
        subPluginsToCommandBackends.put("infinitechests", ImmutableSet.of(new org.core.cgs.subplugins.infinitechests.backends.bind(), new org.core.cgs.subplugins.infinitechests.backends.bindinfo(), new org.core.cgs.subplugins.infinitechests.backends.forcebind(), new org.core.cgs.subplugins.infinitechests.backends.isinfinite(), new org.core.cgs.subplugins.infinitechests.backends.unbind()));
        // Handlers
        subPluginsToMetadataHandlers.put("infinitechests", new MetadataBundle(new org.core.cgs.subplugins.infinitechests.metadata.stored.ChestStoredMH("infinitechests")));
        // Listeners
        subPluginsToListeners.put("infinitechests", ImmutableSet.of(new org.core.cgs.subplugins.infinitechests.listeners.ChestListener(subPluginsToMetadataHandlers.get("infinitechests"), new PlayerInterface("infinitechests"))));
        // SubPlugin
        allSubPlugins.add(new SubPlugin("infinitechests",subPluginsToMetadataHandlers.get("infinitechests"), subPluginsToListeners.get("infinitechests")));
        
        // Autogenerated content for: 'Lightutils'
        // Command Backends
        subPluginsToCommandBackends.put("lightutils", ImmutableSet.of(new org.core.cgs.subplugins.lightutils.backends.create(), new org.core.cgs.subplugins.lightutils.backends.islit(), new org.core.cgs.subplugins.lightutils.backends.islitradial(), new org.core.cgs.subplugins.lightutils.backends.islitrange(), new org.core.cgs.subplugins.lightutils.backends.remove(), new org.core.cgs.subplugins.lightutils.backends.toblockradial(), new org.core.cgs.subplugins.lightutils.backends.toblockrange(), new org.core.cgs.subplugins.lightutils.backends.tolight(), new org.core.cgs.subplugins.lightutils.backends.tolightradial(), new org.core.cgs.subplugins.lightutils.backends.tolightrange(), new org.core.cgs.subplugins.lightutils.backends.wand()));
        // Handlers
        subPluginsToMetadataHandlers.put("lightutils", new MetadataBundle(new org.core.cgs.subplugins.lightutils.metadata.session.CuboidSelectionSessionMH(), new org.core.cgs.subplugins.lightutils.metadata.stored.LightLocationStoredMH("lightutils")));
        // Listeners
        subPluginsToListeners.put("lightutils", ImmutableSet.of(new org.core.cgs.subplugins.lightutils.listeners.ShovelListener(subPluginsToMetadataHandlers.get("lightutils"), new PlayerInterface("lightutils"))));
        // SubPlugin
        allSubPlugins.add(new SubPlugin("lightutils",subPluginsToMetadataHandlers.get("lightutils"), subPluginsToListeners.get("lightutils")));
        
    }

    public static Set<SubPlugin> getFoundSubPlugins() {
        return allSubPlugins;
    }

    public static Set<CommandBackend> getFoundCommandBackends(final String pluginName) {
        return subPluginsToCommandBackends.get(pluginName);
    }

    public static Set<? extends CGSListener> getFoundListeners(final String pluginName) {
        return subPluginsToListeners.get(pluginName);
    }

    public static MetadataBundle getFoundMetadataHandlers(final String pluginName) {
        return subPluginsToMetadataHandlers.get(pluginName);
    }
}
