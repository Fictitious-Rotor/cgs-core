package org.core.cgs.generic.classes;

import org.apache.commons.lang.ArrayUtils;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.core.cgs.generic.interfaces.CommandBackend;
import org.core.cgs.generic.utilities.PlayerInterface;

import java.util.Set;

import static org.core.cgs.generic.utilities.ReflectionUtils.instantiateClasses;

public final class SubPluginCommandExecutor implements CommandExecutor {
    private final SubPluginCommandFileConfig config;
    private final PlayerInterface PLI;
    private final Set<? extends CommandBackend> allCommandBackends;
    private final MetadataBundle metadataBundle;

    public SubPluginCommandExecutor(final SubPluginCommandFileConfig config,
                                    final MetadataBundle metadataBundle,
                                    final PlayerInterface PLI) {
        final String subPluginPackage = String.format("org.core.cgs.subplugins.%s", config.getCommandName());

        this.PLI = PLI;
        this.config = config;
        this.metadataBundle = metadataBundle;
        this.allCommandBackends = instantiateClasses(subPluginPackage, "backends", CommandBackend.class);
    }

    @Override
    public boolean onCommand(final CommandSender sender,
                             final Command command,
                             final String label,
                             final String[] arguments) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("This command can only be run by a player.");
            return false;
        }

        final String mostRelevantCommand = ArrayUtils.isEmpty(arguments) ? command.getName() : arguments[0];
        final Player runningPlayer = (Player)sender;

        // TODO insert help command into allCommandBackends.
        // TODO Should probably inherit from some generic help class, injecting the help message to an instance on startup
        /*[# Autogenerated switch statement begins here #]*/

        /*[# Autogenerated switch statement terrminates here #]*/

        return allCommandBackends.stream()
                                 .filter(cb -> cb.getClass().getName().endsWith(mostRelevantCommand))
                                 .findFirst()
                                 .map(commandBackend -> commandBackend.run(runningPlayer, PLI.prime(runningPlayer), arguments, metadataBundle))
                                 .orElse(false);
    }
}
